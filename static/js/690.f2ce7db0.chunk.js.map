{"version":3,"file":"static/js/690.f2ce7db0.chunk.js","mappings":"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","sources":["Utils/CustomAddModal.tsx","Utils/CustomDoctorDelete.tsx","Utils/BidEditModal.tsx","Component/Doctors/AllDoctor.tsx","CustomComponent/InputComponent.tsx","CustomComponent/SelectComponent.tsx","CustomComponent/UploadComponent.tsx","CustomComponent/FormikControl.tsx"],"sourcesContent":["import React, { useState, FormEvent } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Grid, TextField, Checkbox, FormControlLabel, FormControl } from '@mui/material';\nimport FormikControl from '../CustomComponent/FormikControl';\nimport { PostDoctorInfo } from '../Redux/DoctorSlice';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store';\nimport { IoIosClose } from 'react-icons/io';\nimport './CustomPatientDelete.scss';\n\nimport * as mui from '@mui/material';\n\ninterface CountryOption {\n  id: string;\n  key: string;\n  data: string;\n}\ninterface SpecialistDoctor {\n  id: string;\n  key: string;\n  data: string;\n}\ninterface DoctorInfo {\n  chat: string;\n  user_name: string;\n  bid_statement: string;\n  client_price: number;\n  client_name: string;\n  client_country: string;\n  client_verify_id: number;\n  client_verify_payment: number;\n  client_join_date: string;\n  bid_num: number;\n  when_jobs: string;\n}\nconst signinSchema = Yup.object().shape({\n  email: Yup.string().email().required('Enter valid email-id'),\n  user_name: Yup.string().required('Yourname is required'),\n  client_name: Yup.string().required('Clinetname is required'),\n  bid_statement: Yup.string().required('bid is required'),\n  client_price: Yup.string().required('price number is required'),\n  client_country: Yup.string().required('country is required'),\n  client_join_date: Yup.string().required('joinDate is required'),\n  when_jobs: Yup.string().required('Whenjobs is required'),\n  doctorImage: Yup.mixed().required('File is required'),\n  client_verify_id: Yup.mixed().required('ClientIdVeryfy is required'),\n  client_verify_payment: Yup.mixed().required('ClientPaymentVeryfy is required'),\n  bid_num: Yup.mixed().required('ClientIdVeryfy is required')\n});\n\nconst initial = {\n  user_name: 'kimhae',\n  bid_statement: 'success',\n  client_price: 100,\n  client_name: 'Jackson Wiliwom',\n  client_country: 'portugal',\n  client_verify_id: 1,\n  client_verify_payment: 1,\n  client_join_date: '10',\n  chat: 'Hello! Worker',\n  bid_num: 1,\n  when_jobs: '10'\n};\n\nconst CountryOptions: CountryOption[] = [\n  { id: '1', key: 'not verified', data: '0' },\n  { id: '2', key: 'verified', data: '1' }\n];\n\nconst specialistData: SpecialistDoctor[] = [\n  { id: '1', key: 'Dentist', data: 'Dentist' },\n  { id: '2', key: 'Gaselogist', data: 'Gaselogist' },\n  { id: '3', key: 'Neuro', data: 'Neuro' }\n];\ntype FormikSubmitEvent = FormEvent<HTMLFormElement> & {\n  nativeEvent: { submitter?: HTMLButtonElement };\n};\nconst CustomAddModal: React.FC<{ id: string; open: boolean; close: () => void }> = ({\n  id,\n  open,\n  close\n}) => {\n  const [checkError, setCheckError] = useState<boolean>(false);\n  const [formEvent, setFormEvent] = useState<FormikSubmitEvent | null>(null);\n  const [image, setImg] = useState<string | ArrayBuffer | null>('');\n  const dispatch = useDispatch<AppDispatch>();\n  const handleSubmit = (data: DoctorInfo) => {\n    console.log('have done here of Submitting');\n    console.log('BidsData', data);\n    const formData: any = new FormData();\n    console.log('success1', formData);\n    console.log('success2:what data in formData', formData);\n    // formData.append('doctorName', data?.doctorName);\n    console.log(\n      'see the formdata from UI: ',\n      data,\n      ', typeof Data:',\n      typeof data,\n      typeof data.client_verify_id\n    );\n    const biddata: DoctorInfo = {\n      user_name: data.user_name,\n      client_price: data.client_price,\n      client_name: data.client_name,\n      client_country: data.client_country,\n      client_verify_id: data.client_verify_id,\n      client_verify_payment: data.client_verify_payment,\n      client_join_date: data.client_join_date,\n      chat: data.chat,\n      bid_num: data.bid_num,\n      when_jobs: data.when_jobs,\n      bid_statement: data.bid_statement\n    };\n    // setCheckError(!checkError);\n    dispatch(PostDoctorInfo(biddata));\n    close;\n  };\n  const onSubmit = (values: DoctorInfo) => {\n    console.log('Form submitting started and let/t see DoctorInfo', values);\n    const buttonClicked = formEvent?.nativeEvent.submitter?.name;\n    alert(`You submitted w/ button \"${buttonClicked}\"`);\n    console.log('Hello Guys', values);\n  };\n  const style = {\n    position: 'absolute' as const,\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 550,\n    height: 700,\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    boxShadow: 24,\n    p: 4,\n    borderRadius: '16px'\n  };\n  return (\n    // <div className=\"modal fade\" id={id} aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n    //   <div className=\"modal-dialog modal-md modal-dialog-scrollable\">\n    //     <div className=\"modal-content\">\n    //       <div className=\"modal-header\">\n    <mui.Modal\n      open={open}\n      onClose={close}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\">\n      <mui.Box sx={style}>\n        <div className=\"modal-header\">\n          <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n            Add Bid\n          </h5>\n          <IoIosClose\n            data-bs-dismiss=\"modal\"\n            aria-label=\"Close\"\n            className=\"icons\"\n            onClick={close}\n          />\n        </div>\n        <div className=\"modal-body p-3\">\n          <Formik\n            initialValues={initial}\n            onSubmit={(data) => onSubmit(data)}\n            validationSchema={signinSchema}>\n            {(formik) => (\n              <Form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  console.log(\n                    'have done have done of preventDefault and let me see \"e\":',\n                    e,\n                    'and let see now what is formik:',\n                    formik,\n                    'and at last let me know submitting data:',\n                    formik.values\n                  );\n                  handleSubmit(formik.values);\n                }}>\n                <div>\n                  <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        type=\"text\"\n                        label=\"YourName\"\n                        name=\"user_name\"\n                        onBlur={formik.handleBlur}\n                        onChange={formik.handleChange}\n                        error={formik.touched.user_name && Boolean(formik.errors.user_name)}\n                        helperText={formik.touched.user_name && formik.errors.user_name}\n                        test=\"err1\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        type=\"text\"\n                        label=\"ClinetName\"\n                        name=\"client_name\"\n                        onBlur={formik.handleBlur}\n                        onChange={formik.handleChange}\n                        error={formik.touched.client_name && Boolean(formik.errors.client_name)}\n                        helperText={formik.touched.client_name && formik.errors.client_name}\n                        test=\"err1\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        type=\"text\"\n                        label=\"ClientCountry\"\n                        name=\"client_country\"\n                        onChange={formik.handleChange}\n                        error={\n                          formik.touched.client_country && Boolean(formik.errors.client_country)\n                        }\n                        helperText={formik.touched.client_country && formik.errors.client_country}\n                        test=\"err3\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        type=\"number\"\n                        label=\"ClientPayPrice\"\n                        name=\"client_price\"\n                        min={0}\n                        max={1e10}\n                        onChange={formik.handleChange}\n                        error={formik.touched.client_price && Boolean(formik.errors.client_price)}\n                        helperText={formik.touched.client_price && formik.errors.client_price}\n                        test=\"err4\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        label=\"WhenClientJoin\"\n                        name=\"client_join_date\"\n                        type=\"date\"\n                        onChange={formik.handleChange}\n                        error={\n                          formik.touched.client_join_date && Boolean(formik.errors.client_join_date)\n                        }\n                        helperText={\n                          formik.touched.client_join_date && formik.errors.client_join_date\n                        }\n                        test=\"err7\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        label=\"WhenJobJoin\"\n                        name=\"when_jobs\"\n                        type=\"date\"\n                        onChange={formik.handleChange}\n                        error={formik.touched.when_jobs && Boolean(formik.errors.when_jobs)}\n                        helperText={formik.touched.when_jobs && formik.errors.when_jobs}\n                        test=\"err7\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        type=\"number\"\n                        label=\"BidCount\"\n                        name=\"bid_num\"\n                        min={0}\n                        max={1e10}\n                        onChange={formik.handleChange}\n                        error={formik.touched.bid_num && Boolean(formik.errors.bid_num)}\n                        helperText={formik.touched.bid_num && formik.errors.bid_num}\n                        test=\"err4\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}></Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"select\"\n                        type=\"checkbox\"\n                        label=\"ClientIDVerify\"\n                        name=\"client_verify_id\"\n                        options={CountryOptions}\n                        onChange={formik.handleChange}\n                        error={\n                          formik.touched.client_verify_id && Boolean(formik.errors.client_verify_id)\n                        }\n                        helperText={\n                          formik.touched.client_verify_id && formik.errors.client_verify_id\n                        }\n                        test=\"err4\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"select\"\n                        type=\"checkbox\"\n                        label=\"ClientPaymentVerify\"\n                        name=\"client_verify_payment\"\n                        options={CountryOptions}\n                        onChange={formik.handleChange}\n                        error={\n                          formik.touched.client_verify_payment &&\n                          Boolean(formik.errors.client_verify_payment)\n                        }\n                        helperText={\n                          formik.touched.client_verify_payment &&\n                          formik.errors.client_verify_payment\n                        }\n                        test=\"err4\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        type=\"textField\"\n                        // rows={4}\n                        label=\"Bid\"\n                        multilin\n                        name=\"bid_statement\"\n                        onChange={formik.handleChange}\n                        error={formik.touched.bid_statement && Boolean(formik.errors.bid_statement)}\n                        helperText={formik.touched.bid_statement && formik.errors.bid_statement}\n                        test=\"err4\"\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        type=\"textField\"\n                        // rows={4}\n                        label=\"Chat\"\n                        multilin\n                        name=\"chat\"\n                        onChange={formik.handleChange}\n                        error={formik.touched.chat && Boolean(formik.errors.chat)}\n                        helperText={formik.touched.chat && formik.errors.chat}\n                        test=\"err4\"\n                      />\n                    </Grid>\n                    {/* <Grid item xs={12}>\n                      <mui.FormControl fullWidth sx={{ m: 1 }} variant=\"standard\">\n                        <mui.InputLabel htmlFor=\"filled-adornment-amount\">Chat</mui.InputLabel>\n                        <mui.FilledInput\n                          id=\"filled-adornment-chat\"\n                          name=\"chat\"\n                          rows={4}\n                          multiline\n                        />\n                      </mui.FormControl>\n                    </Grid> */}\n                  </Grid>\n                  <div></div>\n                </div>\n                <div className=\"d-flex align-items-center justify-content-center gap-3 mt-4\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-bs-dismiss=\"modal\"\n                    onClick={close}>\n                    Cancel\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-secondary\"\n                    // data-bs-dismiss={`${checkError ? 'modal' : ''}`}\n                    data-bs-dismiss={'modal'}\n                    aria-label=\"Close\">\n                    save\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </mui.Box>\n    </mui.Modal>\n    //     </div>\n    //   </div>\n    // </div>\n  );\n};\nexport default CustomAddModal;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport './CustomPatientDelete.scss';\nimport { AiOutlineExclamationCircle } from 'react-icons/ai';\nimport { DeleteDoctor } from '../Redux/DoctorSlice';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store';\nconst style = {\n  position: 'absolute' as const,\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  height: 300,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n};\n\nconst CustomDoctorDelete: React.FC<{ open: boolean; close: () => void; edit: any }> = ({\n  open,\n  close,\n  edit\n}) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const handleDelete = () => {\n    dispatch(DeleteDoctor(edit.id));\n    close();\n  };\n  return (\n    <div>\n      <Modal\n        open={open}\n        onClose={close}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\">\n        <Box sx={style}>\n          <div className=\"d-flex justify-content-center mb-3\">\n            <AiOutlineExclamationCircle className=\"delete--img\" />\n          </div>\n          <div className=\"Delete--container d-flex justify-content-center flex-column\">\n            <div className=\"Delete--container-text\">Do you want to delete a Bid?</div>\n            <div className=\"d-flex justify-content-center gap-5 mt-5\">\n              <button className=\"Delete--container-btn cancel border-0\" onClick={close}>\n                Cancel\n              </button>\n              <button className=\"Delete--container-btn success border-0\" onClick={handleDelete}>\n                Yes\n              </button>\n            </div>\n          </div>\n        </Box>\n      </Modal>\n    </div>\n  );\n};\n\nexport default CustomDoctorDelete;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport './CustomPatientDelete.scss';\nimport { AiOutlineExclamationCircle } from 'react-icons/ai';\nimport { DeleteDoctor } from '../Redux/DoctorSlice';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store';\nimport { useState, FormEvent } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Grid, TextField, Checkbox, FormControlLabel, FormControl } from '@mui/material';\nimport FormikControl from '../CustomComponent/FormikControl';\nimport { UpdateDoctorInfo } from '../Redux/DoctorSlice';\nimport { IoIosClose } from 'react-icons/io';\nimport './CustomPatientDelete.scss';\nconst style = {\n  position: 'absolute' as const,\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 550,\n  height: 700,\n  bgcolor: 'background.paper',\n  border: '1px solid #000',\n  boxShadow: 24,\n  p: 4,\n  borderRadius: '16px'\n};\n\nconst CustomDoctorDelete: React.FC<{ open: boolean; close: () => void; editData: any }> = ({\n  open,\n  close,\n  editData\n}) => {\n  const [propsData, setPropsData] = useState(editData);\n  const dispatch = useDispatch<AppDispatch>();\n  const handleDelete = () => {\n    // dispatch(DeleteDoctor(edit));\n    close();\n  };\n  console.log(editData);\n  // const useformik = useFormik({\n  //   initialValues: {};\n  // });\n  // setPropsData(data);\n  interface CountryOption {\n    id: string;\n    key: string;\n    data: string;\n  }\n  interface SpecialistDoctor {\n    id: string;\n    key: string;\n    data: string;\n  }\n  interface DoctorInfo {\n    chat: string;\n    user_name: string;\n    bid_statement: string;\n    client_price: number;\n    client_name: string;\n    client_country: string;\n    client_verify_id: number;\n    client_verify_payment: number;\n    client_join_date: string;\n    bid_num: number;\n    when_jobs: string;\n  }\n  const signinSchema = Yup.object().shape({\n    email: Yup.string().email().required('Enter valid email-id'),\n    user_name: Yup.string().required('Yourname is required'),\n    client_name: Yup.string().required('Clinetname is required'),\n    bid_statement: Yup.string().required('bid is required'),\n    client_price: Yup.string().required('price number is required'),\n    client_country: Yup.string().required('country is required'),\n    client_join_date: Yup.string().required('joinDate is required'),\n    when_jobs: Yup.string().required('Whenjobs is required'),\n    doctorImage: Yup.mixed().required('File is required'),\n    client_verify_id: Yup.mixed().required('ClientIdVeryfy is required'),\n    client_verify_payment: Yup.mixed().required('ClientPaymentVeryfy is required'),\n    bid_num: Yup.mixed().required('ClientIdVeryfy is required')\n  });\n\n  const initial = {\n    user_name: editData.user_name,\n    bid_statement: editData.bid_statement,\n    client_price: editData.client_price,\n    client_name: editData.client_name,\n    client_country: editData.client_country,\n    client_verify_id: editData.client_verify_id,\n    client_verify_payment: editData.client_verify_payment,\n    client_join_date: editData.client_join_date,\n    chat: editData.chat,\n    bid_num: editData.bid_num,\n    when_jobs: editData.when_jobs\n  };\n\n  const CountryOptions: CountryOption[] = [\n    { id: '1', key: 'not verified', data: '0' },\n    { id: '2', key: 'verified', data: '1' }\n  ];\n\n  const specialistData: SpecialistDoctor[] = [\n    { id: '1', key: 'Dentist', data: 'Dentist' },\n    { id: '2', key: 'Gaselogist', data: 'Gaselogist' },\n    { id: '3', key: 'Neuro', data: 'Neuro' }\n  ];\n  type FormikSubmitEvent = FormEvent<HTMLFormElement> & {\n    nativeEvent: { submitter?: HTMLButtonElement };\n  };\n  const [checkError, setCheckError] = useState<boolean>(false);\n  const [formEvent, setFormEvent] = useState<FormikSubmitEvent | null>(null);\n  const [image, setImg] = useState<string | ArrayBuffer | null>('');\n  // const dispatch = useDispatch<AppDispatch>();\n  const handleSubmit = (data: DoctorInfo) => {\n    console.log('have done here of Submitting');\n    console.log('BidsData', data);\n    const formData: any = new FormData();\n    console.log('success1', formData);\n    console.log('success2:what data in formData', formData);\n    // formData.append('doctorName', data?.doctorName);\n    console.log(\n      'see the formdata from UI: ',\n      data,\n      ', typeof Data:',\n      typeof data,\n      typeof data.client_verify_id\n    );\n    const biddata: DoctorInfo = {\n      user_name: data.user_name,\n      client_price: data.client_price,\n      client_name: data.client_name,\n      client_country: data.client_country,\n      client_verify_id: data.client_verify_id,\n      client_verify_payment: data.client_verify_payment,\n      client_join_date: data.client_join_date,\n      chat: data.chat,\n      bid_num: data.bid_num,\n      when_jobs: data.when_jobs,\n      bid_statement: data.bid_statement\n    };\n    console.log('Hello it is edit id:', editData, editData.id);\n    // setCheckError(!checkError);\n    dispatch(UpdateDoctorInfo(editData.id, biddata));\n    close();\n  };\n  const onSubmit = (values: DoctorInfo) => {\n    console.log('Form submitting started and let/t see DoctorInfo', values);\n    const buttonClicked = formEvent?.nativeEvent.submitter?.name;\n    alert(`You submitted w/ button \"${buttonClicked}\"`);\n    console.log('Hello Guys', values);\n  };\n  return (\n    <div>\n      <Modal\n        open={open}\n        onClose={close}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\">\n        <Box sx={style}>\n          {/* <div className=\"d-flex justify-content-center mb-3\">\n            <AiOutlineExclamationCircle className=\"delete--img\" />\n          </div> */}\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Edit Bid\n            </h5>\n            <IoIosClose\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n              className=\"icons\"\n              onClick={close}\n            />\n          </div>\n          <div className=\"modal-body p-3\">\n            <Formik\n              initialValues={{\n                user_name: editData.user_name,\n                bid_statement: editData.bid_statement,\n                client_price: editData.client_price,\n                client_name: editData.client_name,\n                client_country: editData.client_country,\n                client_verify_id: editData.client_verify_id,\n                client_verify_payment: editData.client_verify_payment,\n                client_join_date: editData.client_join_date,\n                chat: editData.chat,\n                bid_num: editData.bid_num,\n                when_jobs: editData.when_jobs\n              }}\n              onSubmit={(data) => onSubmit(data)}\n              validationSchema={signinSchema}>\n              {(formik) => (\n                <Form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(\n                      'have done have done of preventDefault and let me see \"e\":',\n                      e,\n                      'and let see now what is formik:',\n                      formik,\n                      'and at last let me know submitting data:',\n                      formik.values\n                    );\n                    handleSubmit(formik.values);\n                  }}>\n                  <div>\n                    <Grid container spacing={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          // default={editData.user_name}\n                          key=\"user_name\"\n                          control=\"input\"\n                          type=\"text\"\n                          label=\"YourName\"\n                          name=\"user_name\"\n                          // initialValue={{ user_name: editData.user_name }}\n                          onBlur={formik.handleBlur}\n                          onChange={formik.handleChange}\n                          error={formik.touched.user_name && Boolean(formik.errors.user_name)}\n                          helperText={formik.touched.user_name && formik.errors.user_name}\n                          test=\"err1\"\n                        />\n                      </Grid>\n                      <Grid item xs={5}>\n                        <FormikControl\n                          control=\"input\"\n                          type=\"text\"\n                          label=\"ClinetName\"\n                          name=\"client_name\"\n                          onBlur={formik.handleBlur}\n                          onChange={formik.handleChange}\n                          error={formik.touched.client_name && Boolean(formik.errors.client_name)}\n                          helperText={formik.touched.client_name && formik.errors.client_name}\n                          test=\"err1\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          type=\"text\"\n                          label=\"ClientCountry\"\n                          name=\"client_country\"\n                          onChange={formik.handleChange}\n                          error={\n                            formik.touched.client_country && Boolean(formik.errors.client_country)\n                          }\n                          helperText={formik.touched.client_country && formik.errors.client_country}\n                          test=\"err3\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          type=\"number\"\n                          label=\"ClientPayPrice\"\n                          name=\"client_price\"\n                          min={0}\n                          max={1e10}\n                          onChange={formik.handleChange}\n                          error={formik.touched.client_price && Boolean(formik.errors.client_price)}\n                          helperText={formik.touched.client_price && formik.errors.client_price}\n                          test=\"err4\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"WhenClientJoin\"\n                          name=\"client_join_date\"\n                          type=\"date\"\n                          onChange={formik.handleChange}\n                          error={\n                            formik.touched.client_join_date &&\n                            Boolean(formik.errors.client_join_date)\n                          }\n                          helperText={\n                            formik.touched.client_join_date && formik.errors.client_join_date\n                          }\n                          test=\"err7\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"WhenJobJoin\"\n                          name=\"when_jobs\"\n                          type=\"date\"\n                          onChange={formik.handleChange}\n                          error={formik.touched.when_jobs && Boolean(formik.errors.when_jobs)}\n                          helperText={formik.touched.when_jobs && formik.errors.when_jobs}\n                          test=\"err7\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          type=\"number\"\n                          label=\"BidCount\"\n                          name=\"bid_num\"\n                          min={0}\n                          max={1e10}\n                          onChange={formik.handleChange}\n                          error={formik.touched.bid_num && Boolean(formik.errors.bid_num)}\n                          helperText={formik.touched.bid_num && formik.errors.bid_num}\n                          test=\"err4\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}></Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          type=\"checkbox\"\n                          label=\"ClientIDVerify\"\n                          name=\"client_verify_id\"\n                          options={CountryOptions}\n                          onChange={formik.handleChange}\n                          error={\n                            formik.touched.client_verify_id &&\n                            Boolean(formik.errors.client_verify_id)\n                          }\n                          helperText={\n                            formik.touched.client_verify_id && formik.errors.client_verify_id\n                          }\n                          test=\"err4\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          type=\"checkbox\"\n                          label=\"ClientPaymentVerify\"\n                          name=\"client_verify_payment\"\n                          options={CountryOptions}\n                          onChange={formik.handleChange}\n                          error={\n                            formik.touched.client_verify_payment &&\n                            Boolean(formik.errors.client_verify_payment)\n                          }\n                          helperText={\n                            formik.touched.client_verify_payment &&\n                            formik.errors.client_verify_payment\n                          }\n                          test=\"err4\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          type=\"textField\"\n                          // rows={4}\n                          label=\"Bid\"\n                          multilin\n                          name=\"bid_statement\"\n                          onChange={formik.handleChange}\n                          error={\n                            formik.touched.bid_statement && Boolean(formik.errors.bid_statement)\n                          }\n                          helperText={formik.touched.bid_statement && formik.errors.bid_statement}\n                          test=\"err4\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          type=\"textField\"\n                          // rows={4}\n                          label=\"Chat\"\n                          multilin\n                          name=\"chat\"\n                          onChange={formik.handleChange}\n                          error={formik.touched.chat && Boolean(formik.errors.chat)}\n                          helperText={formik.touched.chat && formik.errors.chat}\n                          test=\"err4\"\n                        />\n                      </Grid>\n                      {/* <Grid item xs={12}>\n                    <mui.FormControl fullWidth sx={{ m: 1 }} variant=\"standard\">\n                      <mui.InputLabel htmlFor=\"filled-adornment-amount\">Chat</mui.InputLabel>\n                      <mui.FilledInput\n                        id=\"filled-adornment-chat\"\n                        name=\"chat\"\n                        rows={4}\n                        multiline\n                      />\n                    </mui.FormControl>\n                  </Grid> */}\n                    </Grid>\n                    <div></div>\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-center gap-3 mt-4\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-secondary\"\n                      data-bs-dismiss=\"modal\"\n                      onClick={close}>\n                      Cancel\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-secondary\"\n                      // data-bs-dismiss={`${checkError ? 'modal' : ''}`}\n                      data-bs-dismiss={'modal'}\n                      aria-label=\"Close\">\n                      save\n                    </button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n          <div className=\"Delete--container d-flex justify-content-center flex-column\">\n            {/* <div className=\"Delete--container-text\">hello</div> */}\n            {/* <div className=\"d-flex justify-content-center gap-5 mt-5\">\n              <button className=\"Delete--container-btn cancel border-0\" onClick={close}>\n                Cancel\n              </button>\n              <button className=\"Delete--container-btn success border-0\" onClick={handleDelete}>\n                Yes\n              </button>\n            </div> */}\n          </div>\n        </Box>\n      </Modal>\n    </div>\n  );\n};\n\nexport default CustomDoctorDelete;\n","import React, { useEffect, useCallback, useState } from 'react';\nimport './AllDoctor.scss';\nimport {\n  DataGrid,\n  GridColDef,\n  GridRenderCellParams,\n  GridValueGetterParams\n} from '@mui/x-data-grid';\nimport { Button, Grid } from '@mui/material';\nimport AddIcon from '@mui/icons-material/AddSharp';\nimport EditIcon from '@mui/icons-material/CreateSharp';\nimport DeleteIcon from '@mui/icons-material/DeleteSharp';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../../store';\nimport { GetDoctorInfo } from '../../Redux/DoctorSlice';\nimport Icon from '@mui/material/Icon';\nimport { pink } from '@mui/material/colors';\nimport {\n  DoctorProfile,\n  UserContextType,\n  DoctorEditType,\n  BidType\n} from '../../TypeFile/TypeScriptType';\nimport CustomAddModal from '../../Utils/CustomAddModal';\nimport CustomDoctorDelete from '../../Utils/CustomDoctorDelete';\nimport { BiEdit } from 'react-icons/bi';\nimport { AiOutlineDelete } from 'react-icons/ai';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport CustomDoctorEdit from '../../Utils/CustomDoctorEdit';\n// import CustomDoctorDelete from '../../Utils/CustomDoctorDelete';\nimport BidEditModal from '../../Utils/BidEditModal';\nimport { userContext } from '../../Context/userContext';\nimport { Dots } from 'react-activity';\nimport 'react-activity/dist/library.css';\nimport candles from 'C:/Users/cake/Downloads/img-1-1000x600.jpg';\n\nimport { BsChatLeftText } from 'react-icons/bs';\n\nconst AllDoctor = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [open, setOpen] = React.useState(false);\n  const [showModal, setShowModal] = React.useState<boolean>(false);\n  const [showAddModal, setShowAddModal] = React.useState<boolean>(false);\n  const [edit, setEditId] = React.useState('');\n  const [loading, setLoading] = useState<boolean>(true);\n  const [sendData, setSendData] = useState<BidType>();\n  const [sendDeleteData, setSendDeleteData] = useState<BidType>();\n  const { editDoctorModal } = React.useContext(userContext) as UserContextType;\n  const [showDeleteModal, setShowDeleteModal] = React.useState<boolean>(false);\n  const Loader = () => {\n    return <Dots color=\"#727981\" size={32} speed={1} animating={true} />;\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleEditProfile = (record: DoctorEditType) => {\n    editDoctorModal(record);\n  };\n  const handleDeleteProfile = (record: DoctorEditType) => {\n    setEditId(record._id);\n    setOpen(true);\n  };\n  const GetDoctorData = useSelector((state: RootState) => state?.Doctors.GetDoctorResponse);\n  const reportsData = GetDoctorData?.data;\n  const getAllDoctorProfiles = useCallback(async () => {\n    try {\n      dispatch(GetDoctorInfo())\n        .then((res) => {\n          console.log(res);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } catch (err) {\n      console.log(err);\n    }\n  }, [dispatch]);\n  useEffect(() => {\n    if (reportsData.length > 0) {\n      setLoading(false);\n    }\n  }, [reportsData]);\n\n  useEffect(() => {\n    getAllDoctorProfiles();\n  }, [getAllDoctorProfiles]);\n\n  const handleOpenModal = (record: BidType) => {\n    console.log('edited Data', record);\n    setSendData(record);\n    setShowModal(true);\n  };\n  const openModal = () => {\n    console.log('Hello');\n    setShowAddModal(true);\n  };\n  const openDeleteModal = (record: BidType) => {\n    console.log('You clicked delete Modal');\n    setSendDeleteData(record);\n    setShowDeleteModal(true);\n  };\n\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n  const handleCloseModal = () => setShowModal(false);\n  const handleCloseAddModal = () => setShowAddModal(false);\n\n  const RenderData = (props: GridRenderCellParams) => {\n    // console.log(props);\n    const { hasFocus, row } = props;\n    // const buttonElement = React.useRef<HTMLButtonElement | null>(null);\n\n    return (\n      <>\n        <strong>\n          <Button\n            component=\"button\"\n            // ref={buttonElement}\n            variant=\"contained\"\n            size=\"small\"\n            style={{ marginLeft: 16 }}\n            // Remove button from tab sequence when cell does not have focus\n            tabIndex={hasFocus ? 0 : -1}\n            onClick={() => {\n              handleOpenModal(row);\n            }}>\n            <EditIcon\n              fontSize=\"small\"\n              sx={{ fontSize: 'small' }}\n              onClick={() => {\n                handleOpenModal(row);\n              }}\n            />\n          </Button>\n        </strong>\n        <strong>\n          <Button\n            // sx={{ color: pink[500] }}\n            component=\"button\"\n            // ref={buttonElement}\n            variant=\"contained\"\n            size=\"small\"\n            color=\"error\"\n            style={{ marginLeft: 16 }}\n            // Remove button from tab sequence when cell does not have focus\n            tabIndex={hasFocus ? 0 : -1}\n            onClick={() => {\n              openDeleteModal(row);\n            }}>\n            <DeleteIcon\n              fontSize=\"small\"\n              sx={{ fontSize: 'small' }}\n              onClick={() => {\n                openDeleteModal(row);\n              }}\n            />\n          </Button>\n        </strong>\n      </>\n    );\n  };\n\n  const columns: GridColDef[] = [\n    { field: 'id', headerName: 'No', width: 100 },\n    {\n      field: 'user_name',\n      headerName: 'UserName',\n      width: 300\n    },\n    { field: 'client_name', headerName: 'ClientName', width: 300 },\n    {\n      field: 'client_country',\n      headerName: 'ClientCountry',\n      width: 300\n    },\n    { field: 'client_join_date', headerName: 'JoinDate', width: 150 },\n    { field: 'when_jobs', headerName: 'JobJoinDate', width: 150 },\n    { field: 'bid_num', headerName: 'BidCount', width: 105 },\n    {\n      field: 'action',\n      headerName: 'Action',\n      width: 250,\n      headerAlign: 'center',\n      align: 'center',\n      // renderCell: (params: GridRenderCellParams<Date>) => (\n      //   <strong>\n      //     <Button\n      //       variant=\"contained\"\n      //       size=\"small\"\n      //       style={{ marginLeft: 16 }}\n      //       tabIndex={params.hasFocus ? 0 : -1}\n      //       onClick={handleOpenModal}>\n      //       Detail\n      //     </Button>\n      //   </strong>\n      renderCell: RenderData\n    }\n  ];\n\n  return (\n    // <div className=\"w-100 mt-3 cursor-pointer\" style={{ backgroundImage: `url(${candles})` }}>\n    <div className=\"w-100 mt-3 cursor-pointer\" style={{ backgroundColor: 'white' }}>\n      <Grid container>\n        <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n          <Grid container>\n            <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n              {/* <div className=\"w-100 h-100 card--shadow\">\n                <div className=\"w-48 h-100 rounded overflow-hidden shadow-lg d-flex justify-content-center align-items-center\">\n                  <div className=\"d-flex justify-content-center p-3 flex-column align-items-center\">\n                    <div>\n                      <p\n                        className=\"add--icon-content\"\n                        onClick={() => {\n                          openModal();\n                        }}>\n                        Add new Bid\n                      </p>\n                    </div>\n                    <div className=\"add--icon\">\n                      <AddIcon\n                        data-bs-toggle=\"modal\"\n                        data-bs-target=\"#exampleModal\"\n                        onClick={() => {\n                          openModal();\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div> */}\n              <strong>\n                <Button\n                  component=\"button\"\n                  // ref={buttonElement}\n                  variant=\"contained\"\n                  size=\"small\"\n                  style={{\n                    marginLeft: 32,\n                    float: 'left',\n                    marginBottom: '12px',\n                    marginTop: '12px',\n                    height: 37\n                  }}\n                  // Remove button from tab sequence when cell does not have focus\n                  // tabIndex={hasFocus ? 0 : -1}\n                  onClick={() => {\n                    openModal();\n                  }}>\n                  <AddIcon\n                    onClick={() => {\n                      openModal();\n                    }}\n                  />\n                  New Bid\n                </Button>\n              </strong>\n              <CustomAddModal id={'exampleModal'} open={showAddModal} close={handleCloseAddModal} />\n            </Grid>\n            <div style={{ height: window.innerHeight * 0.78, width: '100%' }}>\n              <DataGrid\n                rows={reportsData ? reportsData : []}\n                columns={columns}\n                pageSize={10}\n                rowsPerPageOptions={[10]}\n                // checkboxSelection\n              />\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      <BidEditModal open={showModal} close={handleCloseModal} editData={sendData ? sendData : []} />\n      <CustomDoctorDelete\n        open={showDeleteModal}\n        close={handleCloseDeleteModal}\n        edit={sendDeleteData ? sendDeleteData : []}\n      />\n      {/* <CustomDoctorEdit id={'exampleModalEdit'} />\n      <CustomDoctorDelete open={open} close={handleClose} edit={edit} /> */}\n    </div>\n  );\n};\n\nexport default AllDoctor;\n","import React from 'react';\nimport { alpha, styled } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\n\nconst BootstrapInput = styled(InputBase)(({ theme }) => ({\n  'label + &': {\n    marginTop: theme.spacing(3),\n    fontSize: 20\n  },\n  '& .MuiInputBase-input': {\n    borderRadius: 4,\n    position: 'relative',\n    backgroundColor: theme.palette.mode === 'light' ? '#fcfcfb' : '#2b2b2b',\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    width: '195px',\n    padding: '10px 12px',\n    transition: theme.transitions.create(['border-color', 'background-color', 'box-shadow']),\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"'\n    ].join(','),\n    '&:focus': {\n      boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\n      borderColor: theme.palette.primary.main\n    }\n  }\n}));\ninterface FieldProps {\n  label: string;\n  name: string;\n  type: string;\n  onChange: () => void;\n  error: string;\n  helperText: string;\n  test: string;\n  value: string;\n}\n\nconst InputComponent: React.FC<FieldProps> = (props) => {\n  const { label, name, type, onChange, error, helperText, test, value } = props;\n  return (\n    <div>\n      <FormControl variant=\"standard\">\n        <InputLabel\n          shrink\n          htmlFor=\"bootstrap-input\"\n          sx={{ fontSize: '1.3rem', fontWeight: 'bolder' }}>\n          {label}\n        </InputLabel>\n        <BootstrapInput\n          id=\"bootstrap-input\"\n          name={name}\n          type={type}\n          value={value}\n          inputProps={{ 'data-testid': name }}\n          onChange={onChange}\n          sx={{ border: `${error ? '1px solid red' : ''}` }}\n        />\n      </FormControl>\n      <span data-testid={test} style={{ color: 'red' }}>\n        {helperText}\n      </span>\n    </div>\n  );\n};\nexport default InputComponent;\n","import React from 'react';\nimport { Select, MenuItem, InputBase, InputLabel } from '@mui/material';\nimport { alpha, styled } from '@mui/material/styles';\nconst BootstrapInput = styled(InputBase)(({ theme }) => ({\n  'label + &': {\n    marginTop: ''\n  },\n\n  '& .MuiInputBase-input': {\n    borderRadius: 4,\n    position: 'relative',\n    backgroundColor: theme.palette.mode === 'light' ? '#fcfcfb' : '#2b2b2b',\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    width: '100%',\n    padding: '10px 12px',\n    transition: theme.transitions.create(['border-color', 'background-color', 'box-shadow']),\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"'\n    ].join(','),\n    '&:focus': {\n      boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\n      borderColor: theme.palette.primary.main\n    }\n  }\n}));\nconst SelectInput = styled(Select)(({ theme }) => ({\n  '& .MuiInputBase-input': {\n    borderRadius: 4,\n    position: 'relative',\n    backgroundColor: theme.palette.mode === 'light' ? '#fcfcfb' : '#2b2b2b',\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    width: '100%',\n    padding: '10px 12px',\n    transition: theme.transitions.create(['border-color', 'background-color', 'box-shadow'])\n  }\n}));\ninterface CountryOption {\n  id: string;\n  key: string;\n  data: string;\n}\n\ninterface FieldProps {\n  control: string;\n  type: string;\n  label: string;\n  name: string;\n  onChange: () => void;\n  error: string;\n  helperText: string;\n  test: string;\n  value: string;\n  options: CountryOption[];\n}\n\nconst SelectComponent: React.FC<FieldProps> = (props) => {\n  const { options, label, error, helperText, name, test, value, ...rest } = props;\n  return (\n    <>\n      <InputLabel\n        shrink\n        htmlFor=\"bootstrap-input\"\n        sx={{ display: 'flex', fontSize: '1.3rem', fontWeight: 'bolder' }}>\n        {label}\n      </InputLabel>\n      <SelectInput\n        labelId=\"demo-customized-select-label\"\n        id=\"demo-customized-select\"\n        sx={{ width: '100%', border: `${error ? '1px solid red' : ''}` }}\n        input={<BootstrapInput />}\n        name={name}\n        defaultValue=\"\"\n        inputProps={{ 'data-testid': name }}\n        {...rest}\n        value={value}>\n        {options?.map((opt: CountryOption) => (\n          <MenuItem value={opt.data} key={opt.id}>\n            {opt.key}\n          </MenuItem>\n        ))}\n      </SelectInput>\n      <span data-testid={test} style={{ color: 'red' }}>\n        {helperText}\n      </span>\n    </>\n  );\n};\nexport default SelectComponent;\n","import { IconButton } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport PhotoCamera from '@mui/icons-material/PhotoCamera';\nimport defaultImg from '../Assets/default1.png';\nimport './UploadComponent.scss';\nimport PropTypes from 'prop-types';\nconst Input = styled('input')({\n  display: 'none',\n  marginTop: '20px'\n});\ninterface FieldProps {\n  imgData: string;\n  name: string;\n  error: string;\n  type: string;\n  test: string;\n}\nconst UploadComponent: React.FC<FieldProps> = (props) => {\n  const { error, imgData, name, test, ...rest } = props;\n  return (\n    <div className=\"\">\n      <div className=\"d-flex justify-content-center\">\n        <div className=\"profile--pic\">\n          <img className=\"profile--pic\" src={imgData ? imgData : defaultImg} alt=\"pic\" />\n        </div>\n      </div>\n      <label htmlFor=\"contained-button-file\" className=\"profile--sider\">\n        <Input accept=\"image/*\" />\n        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"label\">\n          <input\n            hidden\n            accept=\"image/*\"\n            data-testid={name}\n            id=\"contained-button-file\"\n            multiple\n            {...rest}\n          />\n          <PhotoCamera className=\"\" />\n        </IconButton>\n      </label>\n      <span data-testid={test} style={{ color: 'red' }}>\n        {error}\n      </span>\n    </div>\n  );\n};\n\nUploadComponent.propTypes = {\n  error: PropTypes.string.isRequired,\n  imgData: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  test: PropTypes.string.isRequired\n};\nexport default UploadComponent;\n","import React from 'react';\nimport InputComponent from './InputComponent';\nimport SelectComponent from './SelectComponent';\nimport { TextFieldProps } from '@mui/material';\nimport UploadComponent from './UploadComponent';\n\ninterface FieldProps {\n  label: string;\n  name: string;\n  type: string;\n  onChange: () => void;\n  error: string;\n  helperText: string;\n  test: string;\n  value: string;\n  control: string;\n}\n\nconst FormikControl: React.FC<FieldProps | TextFieldProps | any> = (props) => {\n  const { control, ...rest } = props;\n  switch (control) {\n    case 'input':\n      return <InputComponent {...rest} />;\n    case 'select':\n      return <SelectComponent {...rest} />;\n    case 'upload':\n      return <UploadComponent {...rest} />;\n    default:\n      return null;\n  }\n};\nexport default FormikControl;\n"],"names":["signinSchema","Yup","shape","email","required","user_name","client_name","bid_statement","client_price","client_country","client_join_date","when_jobs","doctorImage","client_verify_id","client_verify_payment","bid_num","initial","chat","CountryOptions","id","key","data","open","close","useState","formEvent","dispatch","useDispatch","onClose","sx","position","top","left","transform","width","height","bgcolor","border","boxShadow","p","borderRadius","className","onClick","initialValues","onSubmit","values","console","log","buttonClicked","nativeEvent","submitter","name","alert","validationSchema","formik","e","preventDefault","formData","FormData","biddata","PostDoctorInfo","handleSubmit","Grid","container","spacing","item","xs","FormikControl","control","type","label","onBlur","handleBlur","onChange","handleChange","error","touched","Boolean","errors","helperText","test","min","max","options","multilin","style","edit","Modal","Box","DeleteDoctor","editData","UpdateDoctorInfo","React","showModal","setShowModal","showAddModal","setShowAddModal","setLoading","sendData","setSendData","sendDeleteData","setSendDeleteData","userContext","editDoctorModal","showDeleteModal","setShowDeleteModal","GetDoctorData","useSelector","state","Doctors","GetDoctorResponse","reportsData","getAllDoctorProfiles","useCallback","GetDoctorInfo","then","res","catch","err","useEffect","length","handleOpenModal","record","openModal","openDeleteModal","columns","field","headerName","headerAlign","align","renderCell","props","hasFocus","row","Button","component","variant","size","marginLeft","tabIndex","fontSize","color","backgroundColor","sm","md","lg","xl","float","marginBottom","marginTop","window","innerHeight","DataGrid","rows","pageSize","rowsPerPageOptions","BidEditModal","BootstrapInput","styled","InputBase","theme","palette","mode","padding","transition","transitions","create","fontFamily","join","alpha","primary","main","borderColor","value","FormControl","InputLabel","shrink","htmlFor","fontWeight","inputProps","SelectInput","Select","rest","display","labelId","input","defaultValue","map","opt","MenuItem","Input","imgData","src","alt","accept","IconButton","hidden","multiple","PhotoCamera"],"sourceRoot":""}